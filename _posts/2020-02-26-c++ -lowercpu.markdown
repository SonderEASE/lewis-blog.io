---
layout: post
title:  "C++性能优化笔记"
date:   2020-01-20 20:40:36 +0530
tags: Cpu
categories: [代码 | Coding]
---

# 为什么写这篇文章?

&#8195;&#8195;性能问题和Bug不同，后者的分析和解决思路更清晰，很多时候从应用日志（文中的应用指分布式服务下的单个节点）即可直接找到问题根源，而性能问题，其排查思路更为复杂一些。

&#8195;&#8195;对应用进行性能优化，是一个**系统性的工程，对工程师的技术广度和技术深度都有所要求**。一个简单的应用，它不仅包含了应用代码本身，还和容器（虚拟机）、操作系统、存储、网络、文件系统等紧密相关，线上应用一旦出现了性能问题，需要我们从多方面去考虑。

&#8195;&#8195;与此同时，除了一些低级的代码逻辑引发的性能问题外，很多性能问题隐藏的较深，排查起来会比较困难，需要我们对应用的各个子模块、应用所使用的框架和组件的原理有所了解，同时掌握一定的性能优化工具和经验。

&#8195;&#8195;可见, 要想很好的应对性能问题, 是需要一个**工具与技术的积累**的. 正好后台代码的性能优化是我上半年的一个非常重要的OKR指标, 下了很大功夫, 所以这里做个总结与大家分享~ 


# 性能优化从何做起?

&#8195;&#8195;性能本身就是一个笼统的概念, 首先弄清楚我们关注的性能指标具体是什么,&ensp;Cpu,内存,网络等,这些都是性能指标.&ensp;而Cpu性能需要优化又分为两种情况:**cpu利用率高&平均负载高**以及**cpu利用低&平均负载高**, 本文的工作是针对前者展开的.
在弄清楚要优化目标之后,先别着急开始动手分析改代码,准备阶段还有一些重要的工作要做: 
1) **对性能问题进行粗略的评估,** &ensp;过滤一些因为低级的业务逻辑导致的性能问题。
2) **了解应用的总体架构,** &ensp;比如外部依赖与核心接口、哪些使用频率较高、哪些可以进行修改、上下游数据链路是怎样的等等.
3) **了解应用对应的服务信息,** &ensp;cpu信息、服务器机器版本信息、是容器还是虚拟机、有没有和其他服务混跑等等.

这些工作的目的就是搞一个基准数据出来,结合基准数据和当前的一些业务指标, 确定此次性能优化的最终指标,这里的指标就是一个确切的数值了,比如某个服务,在基准指标下,cpu负载达到z%. 测试有了基准数据以后,开发有任何想要优化的改动都可以交由测试快速完成性能对比,给出反馈,最终达成目标.


# 工具

# 优化列表

# 写在最后
本文只是试图讲清楚回调函数的基本概念与使用方式, 如果有什么问题, 欢迎与我进行交流~ :speech_balloon:  后续我还会对回调相关内容做多的分享, 敬请期待.:ghost:
